{"version":3,"sources":["components/AnimatedText.module.css","components/whitelogo.png","components/AnimatedText.jsx","components/projects.jsx","components/introduction.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","animatedTextContainer","animatedTextContent","animatedTextContentClone","__webpack_require__","p","AnimatedText","_ref","textColor","overlayColor","children","props","Object","objectWithoutProperties","containerElem","useRef","initialMousePos","x","y","_useState","useState","_useState2","slicedToArray","mousePos","setMousePos","react_default","a","createElement","assign","className","classes","style","--maskX","--maskY","onMouseMove","event","nativeEvent","elem","current","newX","offsetX","clientWidth","newY","offsetY","clientHeight","onMouseOut","ref","color","Projects","Component","Introduction","id","src","alt","App","introduction_Introduction","projects_Projects","AnimatedText_AnimatedText","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbf9fe13.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"animatedTextContainer\":\"AnimatedText_animatedTextContainer__1nfGb\",\"animatedTextContent\":\"AnimatedText_animatedTextContent__2U6nF\",\"animatedTextContentClone\":\"AnimatedText_animatedTextContentClone__1I0D1 AnimatedText_animatedTextContent__2U6nF\"};","module.exports = __webpack_public_path__ + \"static/media/whitelogo.d54d90cb.png\";","import React, { useState, useRef } from \"react\";\n\nimport classes from \"./AnimatedText.module.css\";\n\nconst AnimatedText = ({ textColor, overlayColor, children, ...props }) => {\n  const containerElem = useRef(null);\n  const initialMousePos = { x: 0, y: 0 };\n\n  const [mousePos, setMousePos] = useState(initialMousePos);\n  \n  const handleMouseMove = event => {\n    event = event.nativeEvent;\n    const elem = containerElem.current;\n    const newX = (event.offsetX / elem.clientWidth) * 100;\n    const newY = (event.offsetY / elem.clientHeight) * 100;\n    const newMousePos = {\n      x: newX,\n      y: newY\n    };\n    setMousePos(newMousePos);\n  };\n\n  const handleMouseOut = () => setMousePos(initialMousePos);\n\n  return (\n    <section\n      className={classes.animatedTextContainer}\n      style={{\n        \"--maskX\": mousePos.x,\n        \"--maskY\": mousePos.y\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseOut={handleMouseOut}\n      ref={containerElem}\n      {...props}\n    >\n      <h1\n        style={{ color: textColor }}\n        className={classes.animatedTextContent}\n      >\n        {children}\n      </h1>\n      <h1\n        style={{ color: overlayColor }}\n        className={classes.animatedTextContentClone}\n      >\n        {children}\n      </h1>\n    </section>\n  );\n};\n\nexport { AnimatedText };\n","import React, { Component } from 'react'\n\nexport default class Projects extends Component {\n  render() {\n    return (\n      <div className=\"projects-wrapper blue big\">\n      <div className=\"test-wrapper\">\n       <h1 className=\"animated fadeInDownBig offwhite test\">Hi I'm Gozum</h1>         \n      </div>\n      </div>\n\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { AnimatedText }  from './AnimatedText';\nimport artboard from './whitelogo.png';\n\n\n\nexport default class Introduction extends Component {\n  render () {\n    return (\n      <div id=\"introduction\" className=\"intro-wrapper\">\n      \n         {/*} <div className=\"image-container\">\n          <img src=\"./whitelogo.png\" className=\"animated fadeInDown img\" alt=\"Logo\" />\n        </div>\n       */}\n        <div id=\"header\">\n        </div>\n        <div className=\"wrapper\">\n\n          <div className=\"flex-wrapper\">\n\n            <div className=\"image-container\">\n              <img src=\"./blacklogo.png\" className=\"animated fadeInDown img\" alt=\"Logo\" />\n            </div>\n            <h1 id=\"name-header\" className=\"animated fadeInDownBig heading red\">Code That Works</h1>\n            <h2 className=\"animated fadeInDown delay-1s black \">Hi I'm Gozum</h2>\n            <h3 className=\"animated fadeInDown delay-2s black \">I'm a <span className=\"red\">front end web developer </span>\n            based in Southern California</h3>\n            <h3 id=\"last-header\" className=\"animated fadeInDown delay-3s black \">My goal is to \n            <span className=\"red\"> align technology </span> with <span className=\"red\">business\n            objectives</span></h3>\n\n\n                 \n          </div>\n\n\n        </div>\n        <div id=\"footer\">\n\n        </div>\n      </div>\n\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport './components/introduction.css'\nimport './components/animate.css'\nimport './components/projects.css';\n\nimport { AnimatedText }  from './components/AnimatedText';\nimport Projects from './components/projects'\nimport Introduction from './components/introduction'\n// import Test from './components/test'\n\nclass App extends Component {\n  render () {\n    return (\n      <div>    \n      \n        <Introduction />\n        <Projects />  \n         <div className=\"App\">\n       <AnimatedText >\n        PAULO GOZUM\n      </AnimatedText>\n      </div>  \n\n      \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}